{"version":3,"sources":["map.js","dashBroadLeft.js","dashBroadRight.js","index.js"],"names":["mapboxgl","accessToken","Map","mapboxElRef","useRef","data","useSWR","url","fetch","then","r","json","map","point","index","type","geometry","coordinates","longitude","latitude","properties","id","country","province","cases","stats","confirmed","deaths","useEffect","container","current","style","center","zoom","addControl","NavigationControl","once","addSource","features","addLayer","source","paint","lastId","popup","Popup","closeButton","closeOnClick","on","e","getCanvas","cursor","slice","countryISO","lookup","byCountry","iso2","byInternet","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","Math","abs","lngLat","lng","setLngLat","setHTML","addTo","undefined","remove","className","ref","convertNumber","value","toString","replace","TotalPatients","props","content","TotalPatientsEachCountry","state","dataToRender","axios","get","response","dataRes","forEach","push","setState","this","Component","DashBroadLeft","res","TotalDeaths","totalDeaths","TotalRecoverd","totalRecovered","recovered","TotalDeathsTodayEachCountry","totalDeathsTodayEachCountry","todayDeaths","TotalNewPatientsToday","newPatientsToday","todayCases","InforOfVietNam","totalCases","dashBroadRight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.737016e1.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport useSWR from \"swr\";\nimport lookup from \"country-code-lookup\";\nimport \"./App.scss\";\n// Need mapbox css for tooltips later in the tutorial\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoiZHJkdW5nMTk5OSIsImEiOiJjazkzdm05MjkwNmZ6M2ZvbW45bHRjdnI4In0.DyZ4IJKI0CozWJrmPGzbow\";\n\nfunction Map() {\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  const fetcher = url =>\n    fetch(url)\n      .then(r => r.json())\n      .then(data =>\n        data.map((point, index) => ({\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              point.coordinates.longitude,\n              point.coordinates.latitude\n            ]\n          },\n          properties: {\n            id: index,\n            country: point.country,\n            province: point.province,\n            cases: point.stats.confirmed,\n            deaths: point.stats.deaths\n          }\n        }))\n      );\n\n  const { data } = useSWR(\"https://corona.lmao.ninja/v2/jhucsse\", fetcher);\n\n  // Initialize our map\n  useEffect(() => {\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: \"mapbox://styles/mapbox/dark-v10\",\n        center: [108, 15],\n        zoom: 3\n      });\n\n      // Add navigation controls to the top right of the canvas\n      map.addControl(new mapboxgl.NavigationControl());\n\n      map.once(\"load\", function() {\n        // Add our SOURCE\n        map.addSource(\"points\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: data\n          }\n        });\n\n        // Add our layer\n        map.addLayer({\n          id: \"circles\",\n          source: \"points\", // this should be the id of source\n          type: \"circle\",\n          paint: {\n            \"circle-opacity\": 0.75,\n            \"circle-stroke-width\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              1,\n              100000,\n              1.75\n            ],\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              4,\n              1000,\n              8,\n              4000,\n              10,\n              8000,\n              14,\n              12000,\n              18,\n              100000,\n              40\n            ],\n            \"circle-color\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"cases\"],\n              1,\n              \"#ffffb2\",\n              5000,\n              \"#fed976\",\n              10000,\n              \"#feb24c\",\n              25000,\n              \"#fd8d3c\",\n              50000,\n              \"#fc4e2a\",\n              75000,\n              \"#e31a1c\",\n              100000,\n              \"#f00\"\n            ]\n          }\n        });\n\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        let lastId;\n\n        map.on(\"mousemove\", \"circles\", e => {\n          const id = e.features[0].properties.id;\n\n          if (id !== lastId) {\n            lastId = id;\n            const {\n              cases,\n              deaths,\n              country,\n              province\n            } = e.features[0].properties;\n\n            // Change the pointer type on mouseenter\n            map.getCanvas().style.cursor = \"pointer\";\n\n            const coordinates = e.features[0].geometry.coordinates.slice();\n\n            const countryISO =\n              lookup.byCountry(country)?.iso2 ||\n              lookup.byInternet(country)?.iso2;\n            const provinceHTML =\n              province !== \"null\" ? `<p>Khu vực: <b>${province}</b></p>` : \"\";\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n            const countryFlagHTML = Boolean(countryISO)\n              ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n              : \"\";\n\n            const HTML = `<p>Quốc gia: <b>${country}</b></p>\n                ${provinceHTML}\n                <p>Tổng số người mắc: <b>${cases}</b></p>\n                <p>Tử vong: <b>${deaths}</b></p>\n                <p>Tỷ lệ tử vong: <b>${mortalityRate}%</b></p>\n                ${countryFlagHTML}`;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            popup\n              .setLngLat(coordinates)\n              .setHTML(HTML)\n              .addTo(map);\n          }\n        });\n\n        map.on(\"mouseleave\", \"circles\", function() {\n          lastId = undefined;\n          map.getCanvas().style.cursor = \"\";\n          popup.remove();\n        });\n      });\n    }\n  },);\n\n  return (\n    <div className=\"App\">\n      <div className=\"mapContainer\">\n        {/* Mapbox Container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nfunction convertNumber(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); \n}\n\nfunction TotalPatients(props) {\n    return(\n        <div className=\"total-patients\">\n            Tổng số người mắc : <span>{props.content}</span>\n        </div>\n    )\n}\n\n\nclass TotalPatientsEachCountry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataToRender: []\n        }\n    }\n\n    componentWillMount(){\n        axios.get(\"https://corona.lmao.ninja/v2/countries?sort=cases\").then((response) => {\n            let dataRes = [];\n            response.data.forEach(data => {\n                dataRes.push(<li><span>{convertNumber(data.cases)}</span>{data.country}</li>);\n            })\n            this.setState({dataToRender: dataRes});  \n        });\n\n    }\n\n    render() {\n        return (\n            <div className=\"total-patients-each-country\">\n                <div className=\"title\">Số người mắc theo từng quốc gia : </div>\n                <ul>\n                    {this.state.dataToRender}\n                </ul>\n            </div>\n        )\n    }\n}\n\n\n\nclass DashBroadLeft extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            TotalPatients: null,\n        }\n    }\n\n    \n    componentWillMount() {\n        axios.get(\"https://corona.lmao.ninja/v2/all\")\n        .then((res) => {\n            this.setState({TotalPatients: convertNumber(res.data.cases)})\n        });\n    }\n    \n   \n\n    render() {\n        return (\n            <div className=\"big-col-left\">\n                <TotalPatients content={this.state.TotalPatients} />\n                <TotalPatientsEachCountry />\n            </div>\n        );\n    }\n}\n\nexport default DashBroadLeft;\n\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nfunction convertNumber(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); \n}\n\nclass TotalDeaths extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            totalDeaths: []\n        }\n    }\n    \n    componentWillMount() {\n        axios.get(\"https://corona.lmao.ninja/v2/countries?sort=deaths\").then(response =>{\n            let totalDeaths = [];\n            response.data.forEach(data =>{\n                totalDeaths.push(<li><span className=\"color-red\">{convertNumber(data.deaths)}</span>{data.country}</li>)\n            })\n            this.setState({totalDeaths: totalDeaths})\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"col-total-deaths\" className=\"column-data\">\n                <div className=\"title-deaths title\">Số người chết <p>{this.props.deaths}</p></div>\n                <div className=\"content\">\n                    <ul>\n                        {this.state.totalDeaths}\n                    </ul>\n                </div>\n                <div className=\"btn-group\">\n                    <div className=\"btn-view col-total-deaths active\">Số người chết</div>\n                    <div className=\"btn-view col-today-deaths\">Số người chết hôm nay</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass TotalRecoverd extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalRecovered: []\n        }\n    }\n\n    componentWillMount(){\n        axios.get('https://corona.lmao.ninja/v2/countries?sort=recovered').then(response => {\n            let totalRecovered = [];\n            response.data.forEach(data =>{\n                totalRecovered.push(<li><span className=\"color-blue\">{convertNumber(data.recovered)}</span>{data.country}</li>)\n            })\n            this.setState({totalRecovered: totalRecovered})\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"column-data\" id=\"col-total-recovered\">\n                <div className=\"title-recovered title\">Số khỏi bệnh <p>{this.props.recovered}</p></div>\n                <div className=\"content\">\n                    <ul>\n                        {this.state.totalRecovered}\n                    </ul>\n                </div>\n                <div className=\"btn-group\">\n                    <div className=\"btn-view col-total-recovered active\">Số người khỏi bệnh</div>\n                    <div className=\"btn-view col-new-patients\">Số người mắc mới hôm nay</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass TotalDeathsTodayEachCountry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalDeathsTodayEachCountry: []\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://corona.lmao.ninja/v2/countries?sort=todayDeaths\").then(res => {\n            let totalDeathsTodayEachCountry = [];\n            res.data.forEach(data => {\n                totalDeathsTodayEachCountry.push(<li><span className=\"color-red\">{convertNumber(data.todayDeaths)}</span>{data.country}</li>);\n            })\n            this.setState({totalDeathsTodayEachCountry: totalDeathsTodayEachCountry});\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"column-data\" id=\"col-today-deaths\">\n                <div className=\"title-deaths title\">Số người chết hôm nay<p>{this.props.todayDeaths}</p></div>\n                <div className=\"content\">\n                    <ul>\n                        {this.state.totalDeathsTodayEachCountry}\n                    </ul>\n                </div>\n                <div className=\"btn-group\">\n                    <div className=\"btn-view col-total-deaths\">Số người chết</div>\n                    <div className=\"btn-view col-today-deaths active\">Số người chết hôm nay</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass TotalNewPatientsToday extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPatientsToday: null\n        }\n    }\n\n    componentWillMount(){\n        axios.get(\"https://corona.lmao.ninja/v2/countries?sort=todayCases\").then(res => {\n            let newPatientsToday = [];\n            res.data.forEach(data => {\n                newPatientsToday.push(<li><span className=\"color-blue\">{convertNumber(data.todayCases)}</span>{data.country}</li>)\n            })\n            this.setState({newPatientsToday: newPatientsToday})\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"column-data\" id=\"col-new-patients\">\n                <div className=\"title-recovered title\">Số ca mắc mới <p>{this.props.newPatientsToday}</p></div>\n                <div className=\"content\">\n                    <ul>\n                        {this.state.newPatientsToday}\n                    </ul>\n                </div>\n                <div className=\"btn-group\">\n                    <div className=\"btn-view col-total-recovered \">Số người khỏi bệnh</div>\n                    <div className=\"btn-view col-new-patients active\">Số người mắc mới hôm nay</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass InforOfVietNam extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalCases: null,\n            totalDeaths: null,\n            newPatientsToday: null,\n            totalRecovered: null,\n        }\n    }\n\n    componentWillMount() {\n        axios.get(\"https://corona.lmao.ninja/v2/countries/704\").then(res => {\n            this.setState({\n                totalCases: res.data.cases,\n                totalDeaths: res.data.deaths,\n                newPatientsToday: res.data.todayCases,\n                totalRecovered: res.data.recovered,\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"infor-of-vietnam\">\n                <h1>VIỆT NAM</h1>\n        <h3>Tổng số người mắc: <span className=\"color-red\">{this.state.totalCases}</span></h3>\n                <h3>Số người đã được chữa khỏi: <span>{this.state.totalRecovered}</span></h3>\n                <h3>Số người mắc mới trong hôm nay: <span className=\"color-red\">{this.state.newPatientsToday}</span></h3>\n                <h3>Số người chết: <span className=\"color-red\">{this.state.totalDeaths}</span></h3>\n                <h3>Tỷ lệ tử vong: <span className=\"color-red\">0%</span></h3>\n            </div>\n        )\n    }\n}\n\nclass dashBroadRight extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            totalRecovered: null,\n            totalDeaths: null,\n            todayDeaths: null,\n            newPatientsToday: null,\n        }\n    }\n\n    componentWillMount(){\n        axios.get(\"https://corona.lmao.ninja/v2/all\").then(res => {\n            this.setState({totalRecovered: convertNumber(res.data.recovered)});\n            this.setState({totalDeaths: convertNumber(res.data.deaths)});\n            this.setState({todayDeaths: convertNumber(res.data.todayDeaths)});\n            this.setState({newPatientsToday: convertNumber(res.data.todayCases)})\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"big-col-right\">\n                <div className=\"top-component\">\n                    <TotalDeaths deaths={this.state.totalDeaths}/>\n                    <TotalDeathsTodayEachCountry todayDeaths={this.state.todayDeaths}/>\n                    <TotalRecoverd recovered={this.state.totalRecovered}/>\n                    <TotalNewPatientsToday newPatientsToday={this.state.newPatientsToday}/>\n                </div>\n                <div className=\"bottom-component\">\n                    <InforOfVietNam />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default dashBroadRight;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Map from './map'\nimport Left from './dashBroadLeft';\nimport Right from './dashBroadRight';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Left />\n    <Map />\n    <Right/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}